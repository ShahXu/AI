import { useState, useEffect, useCallback } from "react";
import { getTheme } from "@fluentui/react/lib/Styling";
import { CommandBar, ICommandBarProps } from "@fluentui/react/lib/CommandBar";
import {
  DetailsList,
  DetailsRow,
  Selection,
  IDetailsListProps,
  IColumn,
  IDetailsRowStyles,
  CheckboxVisibility,
  ConstrainMode,
  DetailsListLayoutMode,
  SelectionMode,
  ColumnActionsMode,
  IObjectWithKey,
  IDetailsRowProps,
  IDetailsFooterProps
} from "@fluentui/react/lib/DetailsList";
import { TagPicker, ITagPickerProps, ITag } from "@fluentui/react/lib/Pickers";
import { TooltipHost } from "@fluentui/react/lib/Tooltip";
import { TextField, ITextFieldProps } from "@fluentui/react/lib/TextField";
import { SpinButton, ISpinButtonProps } from "@fluentui/react/lib/SpinButton";
import {
  DefaultButton,
  IconButton,
  PrimaryButton
} from "@fluentui/react/lib/Button";
import { Label } from "@fluentui/react/lib/Label";
import {
  Dialog,
  DialogFooter,
  DialogType,
  IDialogProps
} from "@fluentui/react/lib/Dialog";
import eachDayOfInterval from "date-fns/eachDayOfInterval";
import addDays from "date-fns/addDays";
import capitalize from "lodash/capitalize";

import { createTheme, Theme, FontWeights } from "@fluentui/theme";
import { SearchBox } from "@fluentui/react/lib/SearchBox";
import { myTheme } from "./theme";

import {
  ITimesheetDetail,
  sumHoursByDay,
  over24HoursDays
} from "../../ts/timesheet";

import "./style.css";
import colors from "../../data/en_us/colors";

export interface ITimesheetDetailsProps {
  /**
   * An optional boolean that disables the control.
   */
  disabled?: boolean;
  /**
   * An optional boolean that displays the control.
   */
  visible?: boolean;
  /**
   * An array of ITimesheetDetail.
   */
  items: ITimesheetDetail[];
  /**
   * A date to determine which day to start.
   */
  startDate: Date;
  /**
   * A function that fires when the Remove button is clicked.
   */
  onRemove: (items: ITimesheetDetail[]) => Promise<void> | void;
  /**
   * A function that fires when the Save button is clicked.
   */
  onSave: (items: ITimesheetDetail[]) => Promise<void> | void;
  /**
   * A function that fires when searching for projects.
   */
  onProjectResolveSuggestions: (
    filter: string,
    selectedItems?: []
  ) => PromiseLike<ITag[]> | ITag[];
  /**
   * A function that fires when searching for tasks.
   */
  onTaskResolveSuggestions: (
    filter: string,
    projectId: string,
    selectedItems?: []
  ) => PromiseLike<ITag[]> | ITag[];
}

export default function TimesheetDetails({
  disabled = false,
  visible = true,
  items = [],
  startDate = new Date(2023, 3, 17),
  onRemove,
  onSave,
  onProjectResolveSuggestions,
  onTaskResolveSuggestions
}: ITimesheetDetailsProps): JSX.Element | null {
  const [currentItems, setItems] = useState(items),
    renderFoot = useCallback(() => {
      // (footerProps: IDetailsFooterProps) => {
      let mondaytotal = 0;
      let tuesdaytotal = 0;
      let wednesdaytotal = 0;
      let thursdaytotal = 0;
      let fridaytotal = 0;
      currentItems.forEach((x) => {
        mondaytotal += x.monday || 0;
      });
      currentItems.forEach((x) => {
        tuesdaytotal += x.tuesday || 0;
      });
      currentItems.forEach((x) => {
        wednesdaytotal += x.wednesday || 0;
      });
      currentItems.forEach((x) => {
        thursdaytotal += x.thursday || 0;
      });
      currentItems.forEach((x) => {
        fridaytotal += x.friday || 0;
      });
      return (
        <DetailsRow
          styles={{ root: { width: "100%" } }}
          onRenderItemColumn={(items, index, column) => (
            <span>{column?.data}</span>
          )}
          itemIndex={0}
          item={{}}
          columns={[
            {
              onRender: (item?: any) => (
                <div
                  style={{
                    width: "505px",
                    display: "flex",
                    justifyContent: "flex-end",
                    font: "normal normal bold 16px/20px Roobert"
                  }}
                >
                  {" "}
                  Total time entry hours{" "}
                </div>
              ),
              key: "1",
              name: "Total time entry hours",
              data: "Total time entry hours",
              minWidth: 5000,
              maxWidth: 30000000,
              styles: {},

              isResizable: true
            },
            {
              key: "2",
              name: "Monday",
              minWidth: 2000000,
              maxWidth: 30000000,
              data: Number.isNaN(mondaytotal) ? 0 : mondaytotal,
              currentWidth: 200,
              isResizable: true
            },

            {
              key: "3",
              name: "Tuesdaytwo",
              minWidth: 200000000000000000000,
              maxWidth: 30000000,
              data: Number.isNaN(tuesdaytotal) ? 0 : tuesdaytotal,
              currentWidth: 200,
              isResizable: true
            },
            {
              key: "4",
              name: "Wednesday",
              minWidth: 50,
              maxWidth: 30000000,
              data: Number.isNaN(wednesdaytotal) ? 0 : wednesdaytotal,
              currentWidth: 200,
              isResizable: true
            },
            {
              key: "5",
              name: "Thursday",
              minWidth: 50,
              data: Number.isNaN(thursdaytotal) ? 0 : thursdaytotal,
              currentWidth: 200,
              isResizable: true
            },
            {
              key: "6",
              name: "Friday",
              minWidth: 50,
              maxWidth: 30000000,
              data: Number.isNaN(fridaytotal) ? 0 : fridaytotal,
              currentWidth: 2000,
              isResizable: true
            },
            {
              key: "7",
              name: "Saturday",
              minWidth: 50,
              maxWidth: 30000000,
              data: "0",
              isResizable: true
            },
            {
              key: "8",
              name: "Sunday",
              maxWidth: 55,
              minWidth: 55,
              // minWidth: 50,
              data: "0",
              isResizable: true
            }
          ]}
        />
      );
    }, [currentItems]),
    [currentAdd, setAdd] = useState(
      items.length ? Math.max(...items.map((i) => i.lineNumber)) + 1 : 0
    ),
    [currentSelection, setSelection] = useState([] as ITimesheetDetail[]),
    selection = new Selection({
      onSelectionChanged: () => {
        setSelection(
          selection
            .getSelection()
            .map((s: IObjectWithKey) => s as ITimesheetDetail)
        );
      }
    }),
    // ..
    headerStyle = {
      root: {
        backgroundColor: myTheme.palette.themePrimary,
        selectors: {
          "&:hover": {
            backgroundColor: myTheme.palette.themePrimary
          }
        }
      },
      cellTitle: {
        color: myTheme.palette.white
      }
    },
    cbProps: ICommandBarProps = {
      items: [
        {
          key: "add",
          text: "Add Task",
          iconProps: { iconName: "AddTo" },
          title: "Add",
          buttonStyles: {
            icon: {
              color: "#5543D3"
            },
            label: {
              color: "#5543D3"
            }
          },
          disabled,
          onClick: () => {
            setItems([
              ...currentItems,
              {
                id: currentAdd.toString(),
                lineNumber: currentAdd,
                monday: 0,
                tuesday: 0,
                wednesday: 0,
                thursday: 0,
                friday: 0,
                saturday: 0,
                sunday: 0
              } as ITimesheetDetail
            ]);
            setAdd(currentAdd + 1);
          }
        },
        {
          key: "save",
          text: "Save Task",
          iconProps: { iconName: "Save" },
          title: "Save",
          buttonStyles: {
            icon: {
              color: "#5543D3"
            },
            label: {
              color: "#5543D3"
            }
          },
          disabled,
          onClick: () => {
            onSave && onSave(currentItems);
          }
        }
      ]
    },
    week = startDate
      ? eachDayOfInterval({
          start: startDate,
          end: addDays(startDate, 6)
        }).map((day) => {
          console.log(day);
          console.log("003");
          return day;
          return day
            .toLocaleDateString(undefined, { weekday: "long" })
            .toLowerCase();
        })
      : [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
    setDayColumn = (date: Date | string) => {
      const day = date.toLocaleString(undefined, { weekday: "long" });
      // .toLowerCase();
      return {
        key: day.substring(0, 3),
        maxWidth: 78,
        minWidth: 78,
        name: day.substring(0, 3),
        columnActionsMode: ColumnActionsMode.clickable,
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        onRenderHeader: (item?: any) => {
          console.log("0000002");
          console.log(item.column.index);
          console.log("002");
          return (
            <div style={{ fontSize: 20 }}>
              <Label
                style={{
                  fontSize: 14,
                  color: "white",
                  marginTop: "-15px",
                  textAlign: "center"
                }}
              >
                {" "}
                {item.column.key}{" "}
              </Label>
              <Label
                style={{
                  fontSize: 10,
                  float: "right",
                  color: "white",
                  marginTop: "-30px"
                }}
              >
                {date.toLocaleString(undefined, {
                  month: "long",
                  day: "2-digit"
                })}
              </Label>
            </div>
          );
        },
        onRender: (item?: any) => {
          const props: ISpinButtonProps = {
            disabled,
            min: 0,
            max: 24,
            step: 0.25,
            styles: {
              root: { width: 150 },
              ...(item.id.length === 36 && !item.project
                ? { text: { border: "2px solid red" } }
                : {}),
              spinButtonWrapper: { maxWidth: 78, minWidth: 78 },
              input: {
                // backgroundColor: item && item[day] <= 8 ? "#D4F9D6" : "#fff",
                maxWidth: 55,
                minWidth: 55
              }
            },
            value: item ? item[day.toLowerCase()] : 0,
            onChange: (
              event: React.SyntheticEvent<HTMLElement>,
              newValue?: string
            ) => {
              const editIndex = currentItems.findIndex((x) => x.id === item.id);
              if (editIndex >= 0) {
                const tempData = [...currentItems];
                tempData[editIndex] = {
                  ...tempData[editIndex],
                  [day.toLowerCase()]: Number(newValue)
                };
                setItems(tempData);
              }
              // setItems(
              //   currentItems.map((i) => {
              //     if (i.id === item.id) return { ...i, [day]: Number(newValue) };

              //     return i;
              //   })
              // );
            }
          };
          return <SpinButton {...props} />;
        }
      };
    },
    columns: IColumn[] = [
      {
        key: "remove",
        maxWidth: 30,
        minWidth: 30,
        name: "",
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        onRender: (item?: any) => (
          <IconButton
            iconProps={{ iconName: "Delete" }}
            title="Remove"
            ariaLabel="Emoji"
            disabled={disabled}
            onClick={(row) => {
              // if (!currentSelection.length) return;
              console.log("001");
              console.log(item);
              setItems(currentItems.filter((x) => x.id !== item.id));

              onRemove && onRemove(currentSelection);
            }}
          />
        )
      },
      {
        key: "project",
        maxWidth: 180,
        minWidth: 180,
        name: "Project",
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        columnActionsMode: ColumnActionsMode.clickable,
        onRender: (item?: any) => {
          const tpProps: ITagPickerProps = {
            disabled,
            itemLimit: 1,
            styles: {
              root: { width: 150 },
              ...(item.id.length === 36 && !item.project
                ? { text: { border: "2px solid red" } }
                : {})
            },
            // @ts-ignore
            onResolveSuggestions: onProjectResolveSuggestions,
            getTextFromItem: (item: ITag) => item.name,
            pickerSuggestionsProps: {
              suggestionsHeaderText: "Suggested Projects",
              noResultsFoundText: "No Projects Found"
            },
            selectedItems: item?.project
              ? [{ key: item.project.id, name: item.project.name }]
              : [],
            onChange: (items?: ITag[]) => {
              setItems(
                currentItems.map((i) => {
                  if (i.id === item.id)
                    return {
                      ...i,
                      project: items?.length
                        ? { id: items[0].key, name: items[0].name }
                        : null
                    } as ITimesheetDetail;

                  return i as ITimesheetDetail;
                })
              );
            }
          };

          return <SearchBox placeholder="Search" />;
        }
      },
      {
        key: "task",
        maxWidth: 180,
        minWidth: 180,
        name: "Task",
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        columnActionsMode: ColumnActionsMode.clickable,
        onRender: (item?: any) => {
          const tpProps: ITagPickerProps = {
            itemLimit: 1,
            styles: {
              root: { width: 150 },
              ...(item.id.length === 36 && !item.task
                ? { text: { border: "2px solid red" } }
                : {})
            },
            disabled: disabled || !item.project?.id,
            // @ts-ignore
            onResolveSuggestions: (filter: string, selectedItems?: []) =>
              onTaskResolveSuggestions &&
              onTaskResolveSuggestions(filter, item.project.id, selectedItems),
            getTextFromItem: (item: ITag) => item.name,
            pickerSuggestionsProps: {
              suggestionsHeaderText: "Suggested Tasks",
              noResultsFoundText: "No Tasks Found"
            },
            selectedItems: item?.task
              ? [{ key: item.task.id, name: item.task.name }]
              : [],
            onChange: (items?: ITag[]) => {
              setItems(
                currentItems.map((i) => {
                  if (i.id === item.id)
                    return {
                      ...i,
                      task: items?.length
                        ? { id: items[0].key, name: items[0].name }
                        : null
                    } as ITimesheetDetail;

                  return i as ITimesheetDetail;
                })
              );
            }
          };

          return <SearchBox placeholder="Search" />;
        }
      },
      {
        key: "description",
        maxWidth: 150,
        minWidth: 150,
        name: "Description",
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        columnActionsMode: ColumnActionsMode.clickable,
        onRender: (item?: any) => {
          const props: ITextFieldProps = {
            disabled,
            validateOnFocusOut: true,
            validateOnLoad: false,
            styles: {
              fieldGroup: {
                width: 150,
                ...(item.id.length === 36 && !item.description
                  ? { border: "2px solid red" }
                  : {})
              }
            },
            value: item?.description ?? "",
            onChange: (
              event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,
              newValue?: string
            ) => {
              setItems(
                currentItems.map((i) => {
                  if (i.id === item.id)
                    return { ...i, description: newValue } as ITimesheetDetail;

                  return i as ITimesheetDetail;
                })
              );
            }
          };

          return (
            <TooltipHost content={item?.description ?? ""}>
              <TextField {...props} />
            </TooltipHost>
          );
        }
      },
      ...week.map((day) => setDayColumn(day)),
      {
        key: "total",
        maxWidth: 50,
        minWidth: 50,
        name: "Total",
        styles: {
          ...headerStyle,
          cellTitle: {
            color: myTheme.palette.white
          }
        },
        columnActionsMode: ColumnActionsMode.clickable,
        onRender: (item?: any) => {
          const customStyles: Partial<IDetailsRowStyles> = {};
          customStyles.root = {
            // backgroundColor: getTheme().palette.black
          };
          return (
            <Label styles={customStyles}>
              {Number(item?.monday ?? 0) +
                Number(item?.tuesday ?? 0) +
                Number(item?.wednesday ?? 0) +
                Number(item?.thursday ?? 0) +
                Number(item?.friday ?? 0) +
                Number(item?.saturday ?? 0) +
                Number(item?.sunday ?? 0)}
            </Label>
          );
        }
      }
    ],
    theme = getTheme(),
    dlProps: IDetailsListProps = {
      // onRenderDetailsHeader,
      // onRenderDetailsFooter,
      selection,
      columns,
      items: currentItems,
      compact: true,
      constrainMode: ConstrainMode.unconstrained,
      layoutMode: DetailsListLayoutMode.justified,
      selectionMode: SelectionMode.none,
      onRenderDetailsFooter: () => renderFoot(),
      cellStyleProps: {
        cellLeftPadding: 4,
        cellRightPadding: 4,
        cellExtraRightPadding: 0
      },
      checkboxVisibility: disabled
        ? CheckboxVisibility.hidden
        : CheckboxVisibility.onHover,
      onRenderRow: (props: IDetailsRowProps | undefined) => {
        const customStyles: Partial<IDetailsRowStyles> = {};

        if (!props) return null;

        if (props.itemIndex % 2 === 0) {
          customStyles.root = {
            backgroundColor: theme.palette.themeLighterAlt
          };
        }

        return <DetailsRow {...props} styles={customStyles} />;
      }
    },
    [currentHidden, setHidden] = useState(true),
    dlgProps: IDialogProps = {
      hidden: currentHidden,
      modalProps: { isModeless: false },
      dialogContentProps: {
        type: DialogType.normal,
        title: "Timesheet Detail Entry Issues",
        subText: "Please resolve these issues"
      }
    };
  useEffect(
    () =>
      function cleanUp() {
        // @ts-ignore
        globalThis.PowerTimesheetPCF = null;
      },
    []
  );

  useEffect(() => {
    // @ts-ignore
    globalThis.PowerTimesheetPCF = {
      SaveItems: () => {
        onSave && onSave(currentItems);
      },
      TotalHours: () =>
        currentItems
          .map(
            (i) =>
              i.monday +
              i.tuesday +
              i.wednesday +
              i.thursday +
              i.friday +
              i.saturday +
              i.sunday
          )
          .reduce((pv, cv) => pv + cv, 0)
    };
  }, [currentItems]);

  useEffect(() => {
    setItems(items);
    setHidden(
      (currentItems.length === 1 && currentItems[0].id.length !== 36) ||
        (currentItems.every((i) => i.project) &&
          currentItems.every((i) => i.task) &&
          currentItems.every((i) => i.description) &&
          !over24HoursDays(sumHoursByDay(currentItems)).length)
    );
  }, [items]);

  if (!visible) return null;
  console.log("startdate", startDate);
  return (
    <>
      <CommandBar {...cbProps} />
      <DetailsList {...dlProps} />
      <PrimaryButton className="approval-button" text="Submit for Approval" />
      <Dialog {...dlgProps}>
        <ul>
          {currentItems.some((i) => i.id.length === 36 && !i.project) && (
            <li key="project">Empty Project Entry</li>
          )}
          {currentItems.some(
            (i) => i.id.length === 36 && i.project && !i.task
          ) && <li key="task">Empty Task Entry</li>}
          {currentItems.some((i) => i.id.length === 36 && !i.description) && (
            <li key="description">Empty Description Entry</li>
          )}
          {over24HoursDays(sumHoursByDay(currentItems)).map((day) => (
            <li key={day}>{capitalize(day)} is over 24 hours</li>
          ))}
        </ul>
        <DialogFooter>
          <DefaultButton
            onClick={() => {
              setHidden(true);
            }}
            text="Close"
          />
        </DialogFooter>
      </Dialog>
    </>
  );
}
